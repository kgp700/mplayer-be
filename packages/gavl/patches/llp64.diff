diff -ur gavl-1.4.0.orig/gavl/cputest.c gavl-1.4.0/gavl/cputest.c
--- gavl-1.4.0.orig/gavl/cputest.c	2012-06-08 13:49:47.000000000 +0200
+++ gavl-1.4.0/gavl/cputest.c	2013-03-08 14:51:19.144275542 +0100
@@ -69,7 +69,7 @@
      int rval = 0;
     int eax, ebx, ecx, edx;
     int max_std_level, max_ext_level, std_caps=0, ext_caps=0;
-    long a, c;
+    intptr_t a, c;
 
     __asm__ __volatile__ (
                           /* See if CPUID instruction is supported ... */
diff -ur gavl-1.4.0.orig/gavl/memcpy.c gavl-1.4.0/gavl/memcpy.c
--- gavl-1.4.0.orig/gavl/memcpy.c	2012-06-08 13:49:47.000000000 +0200
+++ gavl-1.4.0/gavl/memcpy.c	2013-03-08 14:51:19.144275542 +0100
@@ -144,7 +144,7 @@
 
 #define small_memcpy(to,from,n)\
 {\
-register unsigned long int dummy;\
+register uintptr_t dummy;\
 __asm__ __volatile__(\
   "rep; movsb"\
   :"=&D"(to), "=&S"(from), "=&c"(dummy)\
@@ -174,7 +174,7 @@
     "movsb\n"
     "2:"
     : "=&c" (d0), "=&D" (d1), "=&S" (d2)
-    :"0" (n/4), "q" (n),"1" ((long) to),"2" ((long) from)
+    :"0" (n/4), "q" (n),"1" ((intptr_t) to),"2" ((intptr_t) from)
     : "memory");
 
   return (to);
@@ -213,9 +213,9 @@
 
   if(len >= MIN_LEN)
   {
-    register unsigned long int delta;
+    register uintptr_t delta;
     /* Align destinition to MMREG_SIZE -boundary */
-    delta = ((unsigned long int)to) & (SSE_MMREG_SIZE-1);
+    delta = ((uintptr_t)to) & (SSE_MMREG_SIZE-1);
     if(delta)
     {
       delta=SSE_MMREG_SIZE-delta;
@@ -224,7 +224,7 @@
     }
     i = len >> 6; /* len/64 */
     len&=63;
-    if(((unsigned long)from) & 15)
+    if(((uintptr_t)from) & 15)
       /* if SRC is misaligned */
       for(; i>0; i--)
       {
@@ -290,9 +290,9 @@
 
   if(len >= MMX1_MIN_LEN)
   {
-    register unsigned long int delta;
+    register uintptr_t delta;
     /* Align destinition to MMREG_SIZE -boundary */
-    delta = ((unsigned long int)to) & (MMX_MMREG_SIZE-1);
+    delta = ((uintptr_t)to) & (MMX_MMREG_SIZE-1);
     if(delta)
     {
       delta=MMX_MMREG_SIZE-delta;
@@ -355,9 +355,9 @@
 
   if(len >= MIN_LEN)
   {
-    register unsigned long int delta;
+    register uintptr_t delta;
     /* Align destinition to MMREG_SIZE -boundary */
-    delta = ((unsigned long int)to) & (MMX_MMREG_SIZE-1);
+    delta = ((uintptr_t)to) & (MMX_MMREG_SIZE-1);
     if(delta)
     {
       delta=MMX_MMREG_SIZE-delta;
diff -ur gavl-1.4.0.orig/gavl/sse/scale_y.h gavl-1.4.0/gavl/sse/scale_y.h
--- gavl-1.4.0.orig/gavl/sse/scale_y.h	2012-06-08 13:49:46.000000000 +0200
+++ gavl-1.4.0/gavl/sse/scale_y.h	2013-03-08 14:51:19.144275542 +0100
@@ -41,7 +41,7 @@
     ctx->src + ctx->table_v.pixels[scanline].index * ctx->src_stride;
   
   /* While source is not aligned... */
-  imax = (((long)(src_start)) % 16)/4;
+  imax = (((intptr_t)(src_start)) % 16)/4;
   //  imax = ctx->dst_size * BYTES * WIDTH_MUL;
 
   for(i = 0; i < imax; i++)
diff -ur gavl-1.4.0.orig/gavl/sse/scale_y_linear.h gavl-1.4.0/gavl/sse/scale_y_linear.h
--- gavl-1.4.0.orig/gavl/sse/scale_y_linear.h	2012-06-08 13:49:46.000000000 +0200
+++ gavl-1.4.0/gavl/sse/scale_y_linear.h	2013-03-08 14:53:23.240272996 +0100
@@ -40,7 +40,7 @@
     ctx->src + ctx->table_v.pixels[scanline].index * ctx->src_stride;
   
   /* While source is not aligned... */
-  imax = (((long)(src_start)) % 16)/4;
+  imax = (((intptr_t)(src_start)) % 16)/4;
   
   for(i = 0; i < imax; i++)
     {
diff -ur gavl-1.4.0.orig/gavl/sse2/scale_y.h gavl-1.4.0/gavl/sse2/scale_y.h
--- gavl-1.4.0.orig/gavl/sse2/scale_y.h	2012-06-08 13:49:47.000000000 +0200
+++ gavl-1.4.0/gavl/sse2/scale_y.h	2013-03-08 14:51:19.144275542 +0100
@@ -40,7 +40,7 @@
     ctx->src + ctx->table_v.pixels[scanline].index * ctx->src_stride;
   
   /* While destination is not aligned... */
-  imax = (16 - (((long)(src_start)) % 16))/BYTES;
+  imax = (16 - (((intptr_t)(src_start)) % 16))/BYTES;
   //  imax = ctx->dst_size * BYTES * WIDTH_MUL;
 
   for(i = 0; i < imax; i++)
